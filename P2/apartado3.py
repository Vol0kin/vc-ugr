# -*- coding: utf-8 -*-
"""EsquemaParte3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ge_Pw-txgQ1PRJTdJPioBOl02yILeVuf
"""

#########################################################################
################### OBTENER LA BASE DE DATOS ############################
#########################################################################

# Descargar las imágenes de http://www.vision.caltech.edu/visipedia/CUB-200.html
# Descomprimir el fichero.
# Descargar también el fichero list.tar.gz, descomprimirlo y guardar los ficheros
# test.txt y train.txt dentro de la carpeta de imágenes anterior. Estos 
# dos ficheros contienen la partición en train y test del conjunto de datos.

##### EN CASO DE USAR COLABORATORY
# Sube tanto las imágenes como los ficheros text.txt y train.txt a tu drive.
# Después, ejecuta esta celda y sigue las instrucciones para montar 
# tu drive en colaboratory.
#from google.colab import drive
#drive.mount('/content/drive')

#########################################################################
################ CARGAR LAS LIBRERÍAS NECESARIAS ########################
#########################################################################

# Terminar de rellenar este bloque con lo que vaya haciendo falta

# Importar librerías necesarias
import numpy as np
import keras
import keras.utils as np_utils
from keras.preprocessing.image import load_img, img_to_array
import matplotlib.pyplot as plt

# Importar el optimizador a usar
from keras.optimizers import SGD

# Importar modelos y capas específicas que se van a usar
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Model
from keras.layers import Dense


# Importar el modelo ResNet50 y su respectiva función de preprocesamiento,
# que es necesario pasarle a las imágenes para usar este modelo
from keras.applications.resnet50 import ResNet50, preprocess_input


# Importar el optimizador a usar
from keras.optimizers import SGD

#########################################################################
################## FUNCIÓN PARA LEER LAS IMÁGENES #######################
#########################################################################

# Dado un fichero train.txt o test.txt y el path donde se encuentran los
# ficheros y las imágenes, esta función lee las imágenes
# especificadas en ese fichero y devuelve las imágenes en un vector y 
# sus clases en otro.

def leerImagenes(vec_imagenes, path):
    clases = np.array([img.split('/')[0] for img in vec_imagenes])
    imagenes = np.array([img_to_array(load_img(path + "/" + img, 
                                                target_size = (224, 224))) 
                        for img in vec_imagenes])
    return imagenes, clases

#########################################################################
############# FUNCIÓN PARA CARGAR EL CONJUNTO DE DATOS ##################
#########################################################################

# Usando la función anterior, y dado el path donde se encuentran las
# imágenes y los archivos "train.txt" y "test.txt", devuelve las 
# imágenes y las clases de train y test para usarlas con keras
# directamente.

def cargarDatos(path):
    # Cargamos los ficheros
    train_images = np.loadtxt(path + "/train.txt", dtype = str)
    test_images = np.loadtxt(path + "/test.txt", dtype = str)
    
    # Leemos las imágenes con la función anterior
    train, train_clases = leerImagenes(train_images, path)
    test, test_clases = leerImagenes(test_images, path)
    
    # Pasamos los vectores de las clases a matrices 
    # Para ello, primero pasamos las clases a números enteros
    clases_posibles = np.unique(np.copy(train_clases))
    for i in range(len(clases_posibles)):
        train_clases[train_clases == clases_posibles[i]] = i
        test_clases[test_clases == clases_posibles[i]] = i

    # Después, usamos la función to_categorical()
    train_clases = np_utils.to_categorical(train_clases, 200)
    test_clases = np_utils.to_categorical(test_clases, 200)
    
    # Barajar los datos
    train_perm = np.random.permutation(len(train))
    train = train[train_perm]
    train_clases = train_clases[train_perm]

    test_perm = np.random.permutation(len(test))
    test = test[test_perm]
    test_clases = test_clases[test_perm]
    
    return train, train_clases, test, test_clases

#########################################################################
######## FUNCIÓN PARA OBTENER EL ACCURACY DEL CONJUNTO DE TEST ##########
#########################################################################

# Esta función devuelve el accuracy de un modelo, definido como el 
# porcentaje de etiquetas bien predichas frente al total de etiquetas.
# Como parámetros es necesario pasarle el vector de etiquetas verdaderas
# y el vector de etiquetas predichas, en el formato de keras (matrices
# donde cada etiqueta ocupa una fila, con un 1 en la posición de la clase
# a la que pertenece y 0 en las demás).

def calcularAccuracy(labels, preds):
    labels = np.argmax(labels, axis = 1)
    preds = np.argmax(preds, axis = 1)
    
    accuracy = sum(labels == preds)/len(labels)
    
    return accuracy

#########################################################################
## FUNCIÓN PARA PINTAR LA PÉRDIDA Y EL ACCURACY EN TRAIN Y VALIDACIÓN ###
#########################################################################

# Esta función pinta dos gráficas, una con la evolución de la función
# de pérdida en el conjunto de train y en el de validación, y otra
# con la evolución del accuracy en el conjunto de train y en el de
# validación. Es necesario pasarle como parámetro el historial
# del entrenamiento del modelo (lo que devuelven las funciones
# fit() y fit_generator()).

def mostrarEvolucion(hist):

    loss = hist.history['loss']
    val_loss = hist.history['val_loss']
    plt.plot(loss)
    plt.plot(val_loss)
    plt.legend(['Training loss', 'Validation loss'])
    plt.show()

    acc = hist.history['acc']
    val_acc = hist.history['val_acc']
    plt.plot(acc)
    plt.plot(val_acc)
    plt.legend(['Training accuracy', 'Validation accuracy'])
    plt.show()

# Cargar los datos
x_train, y_train, x_test, y_test = cargarDatos('imagenes')

"""## Usar ResNet50 preentrenada en ImageNet como un extractor de características"""

# Definir parametros de entrenamiento
batch_size = 32
epochs = 35

# Establecer optimizador
optimizer = SGD()

# Definir un objeto de la clase ImageDataGenerator para train y otro para test
# con sus respectivos argumentos
# Generador de entrenamiento
datagen_train = ImageDataGenerator(
    validation_split=0.1,
    preprocessing_function=preprocess_input
)

# Generador de test
datagen_test = ImageDataGenerator(
    preprocessing_function=preprocess_input
)

# Crear iteradores para entrenamiento y validacion
train_iter = datagen_train.flow(
    x_train,
    y_train,
    batch_size=batch_size,
    subset='training'
)

validation_iter = datagen_train.flow(
    x_train,
    y_train,
    batch_size=batch_size,
    subset='validation'
)

# Definir el modelo ResNet50 (preentrenado en ImageNet y sin la última capa).
resnet50 = ResNet50(include_top=False, weights='imagenet', pooling='avg')

# Poner cada capa como no entrenable
for layer in resnet50.layers:
    layer.trainable = False

# Crear modelo completo, incluyendo las capas densas
x = resnet50.output
x = Dense(1024, activation='relu')(x)
x = Dense(200, activation='softmax')(x)

model = Model(inputs=resnet50.input, outputs=x)

# Compilar el modelo
model.compile(
    loss=keras.losses.categorical_crossentropy,
    optimizer=optimizer,
    metrics=['accuracy']
)

# Entrenar el modelo
history = model.fit_generator(
    train_iter,
    steps_per_epoch=len(x_train)*0.9/batch_size,
    epochs=epochs,
    validation_data=validation_iter,
    validation_steps=len(x_train)*0.1/batch_size
)

# Mostrar graficas de evolucion
mostrarEvolucion(history)

# Predecir los datos
prediction = model.predict_generator(
    datagen_test.flow(x_test, batch_size=1, shuffle=False),
    steps=len(x_test),
    verbose=1
)


# Obtener accuracy de test y mostrarla
accuracy = calcularAccuracy(y_test, prediction)
print('Test accuracy: {}'.format(accuracy))

"""## Reentrenar ResNet50 (fine tunning)"""

# Definir el modelo ResNet50 (preentrenado en ImageNet y sin la última capa).
resnet50 = ResNet50(include_top=False, weights='imagenet', pooling='avg')

# Crear modelo entero
x = resnet50.output
x = Dense(1024, activation='relu')(x)
x = Dense(200, activation='softmax')(x)

model = Model(inputs=resnet50.input, outputs=x)

# Compilar el modelo
model.compile(
    loss=keras.losses.categorical_crossentropy,
    optimizer=optimizer,
    metrics=['accuracy']
)

# Entrenar el modelo
history = model.fit_generator(
    train_iter,
    steps_per_epoch=len(x_train)*0.9/batch_size,
    epochs=epochs,
    validation_data=validation_iter,
    validation_steps=len(x_train)*0.1/batch_size
)

# Mostrar graficas de evolucion
mostrarEvolucion(history)

# Predecir los datos
prediction = model.predict_generator(
    datagen_test.flow(x_test, batch_size=1, shuffle=False),
    steps=len(x_test),
    verbose=1
)


# Obtener accuracy de test y mostrarla
accuracy = calcularAccuracy(y_test, prediction)
print('Test accuracy: {}'.format(accuracy))